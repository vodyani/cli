import { toNumber } from '@vodyani/utils';
import { ApiTags, ApiOperation } from '@nestjs/swagger';
import { ArgumentValidator, Required } from '@vodyani/class-decorator';
import { Controller, Get, Query, Post, HttpCode, Body, Param, Delete, Put } from '@nestjs/common';

import { {{ upperName }}Vo } from './vo';
import { Create{{ upperName }}Dto, Find{{ upperName }}Dto, Pagination{{ upperName }}Dto, Update{{ upperName }}Dto } from './dto';

import { HTTP_STATUS } from '@/core/common';
import { ApiResponseVo, ApiArrayResponseVo, ApiPaginationResponseVo } from '@/infrastructure/swagger/decorator';

@Controller('{{ name }}')
@ApiTags('{{ name }} controller')
export class {{ upperName }}Controller {
  constructor(
    private readonly service: any,
  ) {}

  @Get('/find')
  @ApiOperation({ summary: 'find' })
  @ApiResponseVo({{ upperName }}Vo)
  public async findOne(@Query() dto: Find{{ upperName }}Dto) {
    const result = await this.service.findOne(dto);
    return result;
  }

  @Get('/batch/find')
  @ApiOperation({ summary: 'batch find' })
  @ApiArrayResponseVo({{ upperName }}Vo)
  public async findAll(@Query() dto: Find{{ upperName }}Dto) {
    const result = await this.service.findAll(dto);
    return result;
  }

  @Get('/pagination')
  @ApiOperation({ summary: 'pagination' })
  @ApiPaginationResponseVo({{ upperName }}Vo)
  public async pagination(@Query() dto: Pagination{{ upperName }}Dto) {
    const result = await this.service.pagination(dto);
    return result;
  }

  @Post('/create')
  @HttpCode(HTTP_STATUS.SUCCESS)
  @ApiOperation({ summary: 'create' })
  @ApiResponseVo({{ upperName }}Vo)
  public async create(@Body() dto: Create{{ upperName }}Dto) {
    const result = await this.service.create(dto);
    return result;
  }

  @Put(':id')
  @ArgumentValidator()
  @ApiOperation({ summary: 'update' })
  @ApiResponseVo({{ upperName }}Vo)
  public async update(
    @Required() @Param('id') id: string,
    @Body() dto: Update{{ upperName }}Dto,
  ): Promise<void> {
    const result = await this.service.update(toNumber(id), dto);
    return result;
  }

  @Delete(':id')
  @ArgumentValidator()
  @ApiOperation({ summary: 'delete' })
  @ApiResponseVo()
  public async delete(@Required() @Param('id') id: string) {
    const result = await this.service.delete(toNumber(id));
    return result;
  }
}