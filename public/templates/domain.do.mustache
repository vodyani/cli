import { PaginationResult } from '@vodyani/core';
import { IsNotEmpty, IsNumber, IsString, Transform, Type, ValidateIf, ValidateNested } from '@vodyani/validator';

import { PaginationDo } from '@/core/do';

export class {{ upperName }}Do {
  @IsNotEmpty() @IsNumber({ allowNaN: false, allowInfinity: false })
  @Expose()
  public id: number;

  @IsNotEmpty() @IsString()
  @Expose()
  public name: string;
}

export class Find{{ upperName }}Do {
  @ValidateIf(it => it.id) @IsNumber({ allowNaN: false, allowInfinity: false })
  @Expose()
  public id?: number;

  @ValidateIf(it => it.name) @IsString()
  @Expose()
  public name?: string;
}

export class Pagination{{ upperName }}Do implements PaginationResult {
  @ValidateNested({ each: true })
  @Expose() @Type(() => {{ upperName }}Do)
  public rows: {{ upperName }}Do[];

  @ValidateNested()
  @Expose() @Type(() => PaginationDo)
  public page: PaginationDo;
}

export class Create{{ upperName }}Do {
  @IsNotEmpty() @IsString()
  @Expose()
  public name: string;
}

export class Update{{ upperName }}Do {
  @ValidateIf(it => it.id) @IsNumber({ allowNaN: false, allowInfinity: false })
  @Expose()
  public id?: number;

  @ValidateIf(it => it.name) @IsString()
  @Expose()
  public name?: string;
}
